plugins {
    id 'java'
    id 'idea'
    id 'io.qameta.allure' version '2.8.1'
}

group 'org.nazarov'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def junit5Version = '5.7.0'
def allureVersion = '2.13.9'
def logbackVersion = '1.2.3'
def selenideVersion = '5.20.1'
def restAssuredVersion = '4.3.3'
def cucumberVersion = '6.8.1'

dependencies {
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "org.slf4j:slf4j-api:1.7.30"
    implementation "com.codeborne:selenide:${selenideVersion}"
    implementation "io.qameta.allure:allure-selenide:${allureVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    implementation "io.qameta.allure:allure-cucumber6-jvm:${allureVersion}"
    testImplementation "io.rest-assured:json-path:${restAssuredVersion}"
    testImplementation "io.rest-assured:xml-path:${restAssuredVersion}"
    testImplementation "junit:junit:4.13.1"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
    testImplementation "io.qameta.allure:allure-junit5:${allureVersion}"
    testImplementation "io.cucumber:cucumber-java8:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-junit:${cucumberVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit5Version}"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junit5Version}"
}

test {
    // this is required to read properties that are passed, like -Denv=test etc
    systemProperties = System.getProperties()
    useJUnitPlatform()
}

// Test run configuration for Cucumber and jUnit4
// $ gradlew clean testCucumber -Denv=test --tests cucumber.test.* -i
task testCucumber(type: Test) {
    // this is required to read properties that are passed, like -Denv=test etc
    systemProperties = System.getProperties()
    useJUnit()
}

testCucumber.finalizedBy 'allureReport'

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
}


// Test run configuration for Cucumber and jUnit5
// $ gradle cucumber -Denv=test -Dargs=src/test/resources/features/test.feature
// [Start cucumber configuration]
configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

task cucumberCustom() {
    dependsOn assemble, compileTestJava
    doLast {
        def featurePath = 'src/test/resources/features'
        def customFeaturePath = System.getProperty("feature")
        if (customFeaturePath != null) {
            featurePath = customFeaturePath
        }

        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            systemProperties = System.getProperties()
            args = [
                    '--plugin', 'pretty',
                    '--plugin', 'junit:build/test-results/cucumber.xml',
                    '--glue', 'cucumber.steps',
                    featurePath]
        }
    }
}
// [End cucumber configuration]